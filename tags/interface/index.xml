<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>interface on Derry Dev Blog</title>
    <link>https://derry.club/tags/interface/</link>
    <description>Recent content in interface on Derry Dev Blog</description>
    <image>
      <url>https://derry.club/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</url>
      <link>https://derry.club/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Sun, 11 Dec 2022 08:32:40 +0000</lastBuildDate><atom:link href="https://derry.club/tags/interface/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Java Abstract Class and how to use it? When we combine it with interface?</title>
      <link>https://derry.club/posts/java/abstract-class/</link>
      <pubDate>Sun, 11 Dec 2022 08:32:40 +0000</pubDate>
      
      <guid>https://derry.club/posts/java/abstract-class/</guid>
      <description>Java abstract class An abstract class is like a structure of data. However, unlike interface, it can define methods and attribute. You can view it as an enforced blueprint for an object. You cannot initiate an object from it but from its sub-classes.
An abstract class is:
It cannot be instantiated It can contain constructor and object fields. Contains abstract method (0 to many), and concrete methods Its subclasses must override its abstract method An abstract class example:</description>
    </item>
    
  </channel>
</rss>
